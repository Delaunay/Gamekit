#pragma once

#include "/Gamekit/glsl_compat.ush"

float fire_rand(vec2 co) {
  return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

vec2 fire_hash(vec2 p) {
	p = vec2(dot(p, vec2(127.1,311.7)),
			 dot(p, vec2(269.5,183.3)));

	return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
}

float fire_noise(vec2 p) {
   float K1 = 0.366025404; // (sqrt(3)-1)/2;
   float K2 = 0.211324865; // (3-sqrt(3))/6;

	vec2 i = floor( p + (p.x + p.y) * K1 );

    vec2 a = p - i + (i.x + i.y) * K2;
    vec2 o = step(a.yx, a.xy);
    vec2 b = a - o + K2;
	vec2 c = a - 1.0 + 2.0 * K2;

    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);

	vec3 n = h * h * h * h * vec3(
        dot(a, fire_hash(i + 0.0)),
        dot(b, fire_hash(i + o)),
        dot(c, fire_hash(i + 1.0))
    );

    return dot(n, vec3(70.0, 70.0, 70.0));
}

float fire_fbm (vec2 p) {
    float f = 0.0;
    mat2 m = mat2(vec2(1.6,  1.2), vec2(-1.2,  1.6 ));
    f  = 0.5000 * fire_noise(p); p = mul(m, p);
    f += 0.2500 * fire_noise(p); p = mul(m, p);
    f += 0.1250 * fire_noise(p); p = mul(m, p);
    f += 0.0625 * fire_noise(p); p = mul(m, p);
    f = 0.5 + 0.5 * f;
    return f;
}

vec3 fire_bump_map(vec2 uv, float normalStrength, vec2 reso) {
    vec2 s = 1. / reso;
    float p =  fire_fbm(uv);
    float h1 = fire_fbm(uv + s * vec2(1., 0));
    float v1 = fire_fbm(uv + s * vec2(0, 1.));

   	vec2 xy = (p - vec2(h1, v1)) * normalStrength;
    return vec3(xy.x + .5, xy.y + .5, 1.);
}

/*!
 * @param uv
 * @param time
 */
vec3 fire_shader(vec2 uv, float time, float normalStrength, float distortionStrength, vec2 distortionMovement, vec2 fireMovement, vec2 reso) {
	float timeScale = time;

    vec3 normal = fire_bump_map(
        uv * vec2(1.0, 0.3) + distortionMovement * timeScale,
        normalStrength,
        reso
    );

    vec2 displacement = clamp((normal.xy - .5) * distortionStrength, -1., 1.);
    uv += displacement;

    vec2 uvT = (uv * vec2(1.0, 0.5)) + timeScale * fireMovement;
    float n = pow(fire_fbm(8.0 * uvT), 1.0);

    float gradient = pow(1.0 - uv.y, 2.0) * 5.;
    float finalNoise = n * gradient;

    return finalNoise * vec3(2.*n, 2.*n*n*n, n*n*n*n);
}