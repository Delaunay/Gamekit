
.. _program_listing_file_Source_Gamekit_Characters_GKGASCharacter.cpp:

Program Listing for File GKGASCharacter.cpp
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Gamekit_Characters_GKGASCharacter.cpp>` (``Source/Gamekit/Characters/GKGASCharacter.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "Gamekit/Characters/GKGASCharacter.h"
   
   // Gamekit
   #include "Gamekit/Abilities/GKAbilitySystemComponent.h"
   #include "Gamekit/Abilities/GKAbilityTypes.h"
   #include "Gamekit/Abilities/GKAttributeSet.h"
   
   // Unreal Engine
   #include "Components/CapsuleComponent.h"
   #include "GameFramework/CharacterMovementComponent.h"
   
   AGKGASCharacter::AGKGASCharacter()
   {
       PrimaryActorTick.bCanEverTick = false;
       GetCapsuleComponent()->SetCollisionResponseToChannel(ECollisionChannel::ECC_Visibility,
                                                            ECollisionResponse::ECR_Overlap);
       bAlwaysRelevant = true;
   
       TagDead        = FGameplayTag::RequestGameplayTag(FName("State.Dead"));
       TagDeathDispel = FGameplayTag::RequestGameplayTag(FName("Dispel.Death"));
   }
   
   UAbilitySystemComponent *AGKGASCharacter::GetAbilitySystemComponent() const { return AbilitySystemComponent; }
   
   UGKAttributeSet *AGKGASCharacter::GetAttributeSet() const { return AttributeSet; }
   
   void AGKGASCharacter::InitializeGameplayAbilities()
   {
       if (GetLocalRole() != ROLE_Authority || AbilitySystemComponent == nullptr || AbilitySystemComponent->Initialized)
       {
           return;
       }
   
       for (TSubclassOf<UGKGameplayAbility> &Ability: DefaultAbilities)
       {
           AbilitySystemComponent->GiveAbility(FGameplayAbilitySpec(Ability, 1, INDEX_NONE, this));
       }
   
       AbilitySystemComponent->Initialized = true;
   }
   
   void AGKGASCharacter::GetActivatableAbilities(TArray<FGameplayAbilitySpecHandle> &Abilities)
   {
       auto ASC = GetAbilitySystemComponent();
   
       for (const FGameplayAbilitySpec &Spec: ASC->GetActivatableAbilities())
       {
           if ((Spec.SourceObject == this) && DefaultAbilities.Contains(Spec.Ability->GetClass()))
           {
               Abilities.Add(Spec.Handle);
           }
       }
   }
   
   void AGKGASCharacter::ClearGameplayAbilities()
   {
       if (GetLocalRole() != ROLE_Authority || AbilitySystemComponent == nullptr || !AbilitySystemComponent->Initialized)
       {
           return;
       }
   
       TArray<FGameplayAbilitySpecHandle> Abilities;
       GetActivatableAbilities(Abilities);
   
       for (auto &Ability: Abilities)
       {
           AbilitySystemComponent->ClearAbility(Ability);
       }
   
       AbilitySystemComponent->Initialized = false;
   }
   
   void AGKGASCharacter::AGKGASCharacter::Die()
   {
       ClearGameplayAbilities();
   
       GetCapsuleComponent()->SetCollisionEnabled(ECollisionEnabled::NoCollision);
       GetCharacterMovement()->GravityScale = 0;
       GetCharacterMovement()->Velocity     = FVector(0);
   
       OnCharacterDied.Broadcast(this);
   
       if (AbilitySystemComponent != nullptr)
       {
           AbilitySystemComponent->CancelAllAbilities();
   
           FGameplayTagContainer EffectTagsToRemove;
           EffectTagsToRemove.AddTag(TagDeathDispel);
           int32 NumEffectsRemoved = AbilitySystemComponent->RemoveActiveEffectsWithTags(EffectTagsToRemove);
   
           AbilitySystemComponent->AddLooseGameplayTag(TagDead);
       }
   
       if (DeathMontage)
       {
           PlayAnimMontage(DeathMontage);
       }
   }
