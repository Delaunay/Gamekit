
.. _program_listing_file_Source_Gamekit_Abilities_GKAbilityStatic.h:

Program Listing for File GKAbilityStatic.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Gamekit_Abilities_GKAbilityStatic.h>` (``Source/Gamekit/Abilities/GKAbilityStatic.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // BSD 3-Clause License Copyright (c) 2022, Pierre Delaunay All rights reserved.
   
   #pragma once
   
   // Gamekit
   #include "Gamekit/Animation/GKAnimationSet.h"
   #include "Gamekit/GKAssetManager.h"
   #include "Gamekit/Gamekit.h"
   #include "Gamekit/Projectiles/GKProjectile.h"
   #include "Gamekit/Utilities/GKBitFlag.h"
   
   // Unreal Engine
   #include "Abilities/GameplayAbilityTargetActor.h"
   #include "Engine/DataTable.h"
   #include "GameplayAbilitySpec.h"
   #include "Styling/SlateBrush.h"
   
   // Generated
   #include "GKAbilityStatic.generated.h"
   
   class UGKGameplayAbility;
   
   // MOBA/Hack'n Slash like Ability binding
   UENUM(BlueprintType)
   enum class EGK_AbilityKind : uint8
   {
       None  UMETA(DisplayName = "None"),
       Item  UMETA(DisplayName = "Item"),
       Skill UMETA(DisplayName = "Skill"),
   };
   
   // MOBA/Hack'n Slash like Ability binding
   UENUM(BlueprintType)
   enum class EGK_AbilityBehavior : uint8
   {
       Hidden       UMETA(DisplayName = "Hidden"),       // Not shown in UI
       Passive      UMETA(DisplayName = "Passive"),      // Passive ability, enabled as soon as it is equiped
       NoTarget     UMETA(DisplayName = "NoTarget"),     // Ability is cast as soon as the input is pressed
       ActorTarget  UMETA(DisplayName = "ActorTarget"),  // Ability targets another actor
       PointTarget  UMETA(DisplayName = "PointTarget"),  // Ability targets the ground
       VectorTarget UMETA(DisplayName = "VectorTarget"), // Ability targets 2 points
       Toggle       UMETA(DisplayName = "Toggle"),       // Ability is Active or not
   };
   
   
   
   // This is create because we cannot use include AGKAbilityTarget_Actor
   // in AbilityStatic
   UENUM(BlueprintType)
   enum class EGK_TargetingMode : uint8
   {
       None                  UMETA(DisplayName = "None"),
       PlayerControllerTrace UMETA(DisplayName = "PlayerControllerTrace"),
   };
   
   UENUM(BlueprintType)
   enum class EGK_ItemSlot : uint8
   {
       None,
   
       Head,
       Neck,
       Shoulders,
       Shirt,
       Chest,
       Belt,
       Legs,
       Feet,
       Wrist,
       Gloves,
       Finger1,
       Finger2,
       Trinket1,
       Trinket2,
       Back,
       RightHand,
       LeftHand,
       Tabard,
   
       Ranged,
       Ammo,
   };
   
   USTRUCT(BlueprintType)
   struct GAMEKIT_API FGKAbilityCost
   {
       GENERATED_USTRUCT_BODY()
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly)
       FGameplayAttribute Attribute;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly)
       TArray<float> Value;
   };
   
   USTRUCT(BlueprintType)
   struct GAMEKIT_API FGKAbilityEffect
   {
       GENERATED_USTRUCT_BODY()
   
       FName EffectName;
   
       TArray<float> Curve;
   };
   
   USTRUCT(BlueprintType)
   struct GAMEKIT_API FGKAbilityStatic: public FTableRowBase
   {
       GENERATED_USTRUCT_BODY()
   
       public:
       FGKAbilityStatic();
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Common)
       FName Name;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Common)
       EGK_AbilityKind AbilityKind;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Common)
       FText LocalName;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Common)
       FText LocalDescription;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Common)
       class UTexture2D *Icon;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Ability)
       int32 MaxLevel;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Ability)
       float Duration;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Ability)
       TMap<FName, FGKAbilityEffect> AbilityEffects;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Ability)
       FGKAbilityCost Cost;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Ability)
       TArray<float> Cooldown;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Item)
       int32 Price;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Item)
       EGK_ItemSlot Slot;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Item)
       int32 MaxStack;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Target)
       bool bIgnoreRange;
   
       // Should be a TArray | Ability Level can change this
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Target)
       float CastMaxRange;
   
       // Should be a TArray | Ability Level can change this
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Target)
       float CastMinRange;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Target)
       EGK_AbilityBehavior AbilityBehavior;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Target, meta = (Bitmask, BitmaskEnum = "ETeamAttitude"))
       int32 TargetActorFaction;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Target)
       TSubclassOf<AActor> TargetFilterClass;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Target)
       TSubclassOf<AGameplayAbilityTargetActor> AbilityTargetActorClass;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Target)
       TArray<TEnumAsByte<EObjectTypeQuery>> TargetObjectTypes;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Animation)
       float CastTime;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Animation)
       float ChannelTime;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Animation)
       EGK_AbilityAnimation AbilityAnimation;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Projectile);
       TSubclassOf<AGKProjectile> ProjectileActorClass;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Projectile)
       FGKProjectileStatic ProjectileData;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = AreaOfEffect);
       TSubclassOf<AActor> ImpactActorClass;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = AreaOfEffect)
       float AreaOfEffect;
   };
