
.. _program_listing_file_Source_Gamekit_Abilities_GKAttributeSet.h:

Program Listing for File GKAttributeSet.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Gamekit_Abilities_GKAttributeSet.h>` (``Source/Gamekit/Abilities/GKAttributeSet.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // BSD 3-Clause License Copyright (c) 2022, Pierre Delaunay All rights reserved.
   
   #pragma once
   
   // Gamekit
   #include "Gamekit/Gamekit.h"
   
   // Unreal Engine
   #include "AbilitySystemComponent.h"
   #include "AttributeSet.h"
   
   // Generated
   #include "GKAttributeSet.generated.h"
   
   #if defined(DOXYGEN_DOCUMENTATION_BUILD)
   #    define ATTRIBUTE_ACCESSORS(ClassName, PropertyName)
   #else
   // Uses macros from AttributeSet.h
   #    define ATTRIBUTE_ACCESSORS(ClassName, PropertyName)           \
           GAMEPLAYATTRIBUTE_PROPERTY_GETTER(ClassName, PropertyName) \
           GAMEPLAYATTRIBUTE_VALUE_GETTER(PropertyName)               \
           GAMEPLAYATTRIBUTE_VALUE_SETTER(PropertyName)               \
           GAMEPLAYATTRIBUTE_VALUE_INITTER(PropertyName)
   #endif
   
   UCLASS(Blueprintable)
   class GAMEKIT_API UGKAttributeSet: public UAttributeSet
   {
       GENERATED_BODY()
       public:
       // Constructor and overrides
       UGKAttributeSet();
       virtual void PreAttributeChange(const FGameplayAttribute &Attribute, float &NewValue) override;
       virtual void PostGameplayEffectExecute(const FGameplayEffectModCallbackData &Data) override;
       virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty> &OutLifetimeProps) const override;
   
       UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = "Health", ReplicatedUsing = OnRep_Health)
       FGameplayAttributeData Health;
       ATTRIBUTE_ACCESSORS(UGKAttributeSet, Health)
   
       UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = "Experience", ReplicatedUsing = OnRep_Experience)
       FGameplayAttributeData Experience;
       ATTRIBUTE_ACCESSORS(UGKAttributeSet, Experience)
   
       UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = "Health", ReplicatedUsing = OnRep_MaxHealth)
       FGameplayAttributeData MaxHealth;
       ATTRIBUTE_ACCESSORS(UGKAttributeSet, MaxHealth)
   
       UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = "Mana", ReplicatedUsing = OnRep_Mana)
       FGameplayAttributeData Mana;
       ATTRIBUTE_ACCESSORS(UGKAttributeSet, Mana)
   
       UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = "Mana", ReplicatedUsing = OnRep_MaxMana)
       FGameplayAttributeData MaxMana;
       ATTRIBUTE_ACCESSORS(UGKAttributeSet, MaxMana)
   
       UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = "MoveSpeed", ReplicatedUsing = OnRep_MoveSpeed)
       FGameplayAttributeData MoveSpeed;
       ATTRIBUTE_ACCESSORS(UGKAttributeSet, MoveSpeed)
   
       UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = "Damage", ReplicatedUsing = OnRep_Damage)
       FGameplayAttributeData Damage;
       ATTRIBUTE_ACCESSORS(UGKAttributeSet, Damage)
   
       UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = "Armor", ReplicatedUsing = OnRep_Armor)
       FGameplayAttributeData Armor;
       ATTRIBUTE_ACCESSORS(UGKAttributeSet, Armor)
   
       UFUNCTION(BlueprintCallable, BlueprintPure, Category = "Attributes")
       FGameplayAttributeData GetAttribute(FName AttributeName);
   
       UFUNCTION(BlueprintCallable, BlueprintPure, Category = "Attributes")
       float GetBaseValue(FName AttributeName);
   
       UFUNCTION(BlueprintCallable, BlueprintPure, Category = "Attributes")
       float GetCurrentValue(FName AttributeName);
   
       void SetMovementComponentMaxSpeed(float Value);
   
       protected:
       void AdjustAttributeForMaxChange(FGameplayAttributeData &      AffectedAttribute,
                                        const FGameplayAttributeData &MaxAttribute,
                                        float                         NewMaxValue,
                                        const FGameplayAttribute &    AffectedAttributeProperty);
   
       // These OnRep functions exist to make sure that the ability system internal representations are synchronized
       // properly during replication
       UFUNCTION()
       virtual void OnRep_Health(const FGameplayAttributeData &OldValue);
   
       UFUNCTION()
       virtual void OnRep_MaxHealth(const FGameplayAttributeData &OldValue);
   
       UFUNCTION()
       virtual void OnRep_Mana(const FGameplayAttributeData &OldValue);
   
       UFUNCTION()
       virtual void OnRep_MaxMana(const FGameplayAttributeData& OldValue);
   
       UFUNCTION()
       virtual void OnRep_MoveSpeed(const FGameplayAttributeData& OldValue);
   
       UFUNCTION()
       virtual void OnRep_Damage(const FGameplayAttributeData& OldValue);
   
       UFUNCTION()
       virtual void OnRep_Armor(const FGameplayAttributeData& OldValue);
   
       UFUNCTION()
       void OnRep_Experience(const FGameplayAttributeData& OldValue);
   
       TMap<FName, FGameplayAttributeData> NameToAttribute;
   };
