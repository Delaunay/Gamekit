
.. _program_listing_file_Source_Gamekit_Widget_DragDrop_GKWidgetDragVisual.h:

Program Listing for File GKWidgetDragVisual.h
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Gamekit_Widget_DragDrop_GKWidgetDragVisual.h>` (``Source/Gamekit/Widget/DragDrop/GKWidgetDragVisual.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   // Unreal Engine
   #include "Blueprint/UserWidget.h"
   
   // Generated
   #include "GKWidgetDragVisual.generated.h"
   
   // This is supposed to reset the location of the Widget on Drag&Drop failures but it does not work
   struct FGKWidgetLocationData
   {
       FGKWidgetLocationData() {}
   
       FGKWidgetLocationData(UUserWidget *Widget)
       {
           DesiredSize         = Widget->GetDesiredSize();
           AlignmentInViewport = Widget->GetAlignmentInViewport();
           AnchorsInViewport   = Widget->GetAnchorsInViewport();
       }
   
       void Reset(UUserWidget *Widget)
       {
           Widget->SetDesiredSizeInViewport(DesiredSize);
           Widget->SetAlignmentInViewport(AlignmentInViewport);
           Widget->SetAnchorsInViewport(AnchorsInViewport);
       }
   
       FVector2D DesiredSize;
       FVector2D AlignmentInViewport;
       FAnchors  AnchorsInViewport;
   };
   
   UCLASS(BlueprintType, Blueprintable, meta = (DisableNativeTick))
   class GAMEKIT_API UGKWidgetDragVisual: public UUserWidget
   {
       GENERATED_BODY()
   
       public:
       UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Drag and Drop", meta = (ExposeOnSpawn = "true"))
       UUserWidget *DraggedWidget;
   
       UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Drag and Drop", meta = (ExposeOnSpawn = "true"))
       UPanelWidget *PreviousParent;
   
       UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Drag and Drop", meta = (ExposeOnSpawn = "true"))
       bool RestoreParentOnFailure;
   
       UFUNCTION()
       void OnDragCancelled_Native(UDragDropOperation *Operation);
   };
