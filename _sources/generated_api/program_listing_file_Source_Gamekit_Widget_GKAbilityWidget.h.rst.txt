
.. _program_listing_file_Source_Gamekit_Widget_GKAbilityWidget.h:

Program Listing for File GKAbilityWidget.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Gamekit_Widget_GKAbilityWidget.h>` (``Source/Gamekit/Widget/GKAbilityWidget.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // BSD 3-Clause License Copyright (c) 2022, Pierre Delaunay All rights reserved.
   
   #pragma once
   
   // Gamekit
   #include "Gamekit/Abilities/GKGameplayAbility.h"
   #include "Gamekit/Items/GKInventoryInterface.h"
   
   // Unreal Engine
   #include "Blueprint/UserWidget.h"
   #include "CoreMinimal.h"
   #include "GameplayAbilitySpec.h"
   
   // Generated
   #include "GKAbilityWidget.generated.h"
   
   /* Simple Widget that receives ability state update through a top level UGKAbilityWidgetContainer
    */
   UCLASS(BlueprintType, Blueprintable, meta = (DisableNativeTick))
   class GAMEKIT_API UGKAbilityWidget: public UUserWidget
   {
       // I tried to implement Delegate binding here but I get a LOT of issues
       // from the ability not bein instantiated to some event tag simply not firing
       GENERATED_BODY()
   
       public:
       UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = Ability)
       void OnAbilityCooldownBegin(float TimeRemaining, float Duration);
   
       UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = Ability)
       void OnAbilityCooldownEnd(float TimeRemaining, float Duration);
   
       UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = Ability)
       void OnAbilityLevelUp(int Level);
   
       UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = Ability)
       void OnStartTargeting();
   
       UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = Ability)
       void OnEndTargeting(bool Cancelled);
   
       UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = Ability)
       void OnAbilityDisabled(bool Enabled);
   
       UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = Ability)
       void OnAbilityInsufficientResources(bool CostMet);
   
       virtual void OnAbilityCooldownBegin_Implementation(float TimeRemaining, float Duration) {}
   
       virtual void OnAbilityCooldownEnd_Implementation(float TimeRemaining, float Duration) {}
   
       virtual void OnAbilityLevelUp_Implementation(int Level) {}
   
       virtual void OnStartTargeting_Implementation() {}
   
       virtual void OnEndTargeting_Implementation(bool Cancelled) {}
   
       virtual void OnAbilityDisabled_Implementation(bool Enabled) {}
   
       virtual void OnAbilityInsufficientResources_Implementation(bool CostMet) {}
   
       UFUNCTION(BlueprintCallable, BlueprintCosmetic)
       virtual void SetupListeners(class UGKGameplayAbility *AbilityIn);
   
       UFUNCTION(BlueprintCallable, BlueprintCosmetic)
       void RemoveListeners();
   
       void NativeDestruct() override;
   
       protected:
       UPROPERTY()
       bool bBound;
   
       class UGKGameplayAbility *Ability;
   
       class UGKAsyncTaskAttributeChanged *AttributeChangedTask;
   
       class UGKAsyncTaskCooldownChanged *CooldownChangedTask;
   
       UFUNCTION()
       void OnAbilityInsufficientResources_Native(FGameplayAttribute Attribute, float NewValue, float OldValue);
   
       UFUNCTION()
       void OnAbilityCooldownBegin_Native(FGameplayTag CooldownTag, float TimeRemaining, float Duration);
   
       UFUNCTION()
       void OnAbilityCooldownEnd_Native(FGameplayTag CooldownTag, float TimeRemaining, float Duration);
   };
