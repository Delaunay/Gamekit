
.. _program_listing_file_Source_Gamekit_GKWorldSettings.h:

Program Listing for File GKWorldSettings.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Gamekit_GKWorldSettings.h>` (``Source/Gamekit/GKWorldSettings.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // BSD 3-Clause License Copyright (c) 2022, Pierre Delaunay All rights reserved.
   
   #pragma once
   
   // Unreal Engine
   #include "CoreMinimal.h"
   #include "GameFramework/WorldSettings.h"
   #include "Engine/DataTable.h"
   
   // Generated
   #include "GKWorldSettings.generated.h"
   
   USTRUCT(BlueprintType)
   struct GAMEKIT_API FGKTeamInfo: public FTableRowBase
   {
       GENERATED_BODY()
       public:
   
       uint8_t      TeamId;
   
       UPROPERTY(EditAnywhere, BlueprintReadWrite)
       FName        Name;
   
       UPROPERTY(EditAnywhere, BlueprintReadWrite)
       FText        DisplayName;
   
       UPROPERTY(EditAnywhere, BlueprintReadWrite)
       FText        Description;
   
       UPROPERTY(EditAnywhere, BlueprintReadWrite)
       FLinearColor Color;
   };
   
   
   UCLASS()
   class GAMEKIT_API AGKWorldSettings: public AWorldSettings
   {
       GENERATED_BODY()
   
       public:
       AGKWorldSettings();
   
       // Size of the Map in total in mm (1e3)
       // The map MUST be centered on (0, 0)
       // You can avoid using this if you are using a Fog of War Volume
       // The Volume knows its size and can be fetched using ``GetFogOfWarMapSize``
       // Which simplify your life as you do not have to set the size of everything
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Level|Constants")
       FVector2D MapSize;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Teams")
       FName DefaultTeam;
   
       FGKTeamInfo const *GetTeamInfo(int Index) const;
   
       FGKTeamInfo const *GetTeamInfoFromName(FName) const;
   
       void BuildTeamCache() const;
   
       TArray<FGKTeamInfo *> const &GetTeams() { 
           BuildTeamCache();
           return TeamCache;
       }
   
   private:
       UPROPERTY(EditDefaultsOnly, Category = "Teams")
       class UDataTable *Teams;
   
       mutable TArray<FGKTeamInfo*> TeamCache;
   };
