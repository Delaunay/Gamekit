
.. _program_listing_file_Source_Gamekit_FogOfWar_Strategy_GK_FoW_Strategy.h:

Program Listing for File GK_FoW_Strategy.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Gamekit_FogOfWar_Strategy_GK_FoW_Strategy.h>` (``Source/Gamekit/FogOfWar/Strategy/GK_FoW_Strategy.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // BSD 3-Clause License Copyright (c) 2022, Pierre Delaunay All rights reserved.
   
   #pragma once
   
   // Gamekit
   #include "Gamekit/Container/Matrix.h"
   
   // Unreal Engine
   #include "Components/ActorComponent.h"
   #include "CoreMinimal.h"
   #include "GenericTeamAgentInterface.h"
   
   // Generated
   #include "GK_FoW_Strategy.generated.h"
   
   UCLASS(BlueprintType)
   class GAMEKIT_API UGKFogOfWarStrategy: public UActorComponent
   {
       GENERATED_BODY()
   
       public:
       UGKFogOfWarStrategy();
   
       virtual bool SupportVisbilityQuery() const { return false; }
   
       virtual bool IsVisible(FGenericTeamId SeerTeam, AActor const *Target) const
       {
           return IsVisible(SeerTeam, Target->GetActorLocation());
       }
   
       virtual bool IsVisible(FGenericTeamId SeerTeam, FVector Loc) const { return true; }
   
       virtual void Initialize();
   
       virtual void Stop() {}
   
       virtual void DrawFactionFog(class AGKFogOfWarTeam *FactionFog);
   
       virtual void DrawLineOfSight(class AGKFogOfWarTeam *FactionFog, class UGKFogOfWarComponent *c) {}
   
       void DebugDrawComponent(class UGKFogOfWarComponent *c);
   
       void DebugDrawPoint(FVector Center, FLinearColor Color = FLinearColor::White, float Radius = 26.f);
   
       virtual TMatrix3D<uint8> const *GetFactionTextureCPU(FName name) const { return nullptr; }
   
       virtual class UTexture *GetFactionTexture(FName name, bool CreateRenderTarget = true) { return nullptr; }
   
       virtual class UTexture *GetPreviousFrameFactionTexture(FName name, bool CreateRenderTarget = true)
       {
           return nullptr;
       }
   
       void OnNewFaction(FName Name) { GetFactionTexture(Name, true); }
   
       // Check if actor has a FogOfWar component, is so trigger the OnSighted event
       void AddVisibleActor(class AGKFogOfWarTeam      *FactionFog,
                            class UGKFogOfWarComponent *SourceComp,
                            class AActor               *Actor);
   
       void AddVisibleComponent(class AGKFogOfWarTeam      *FactionFog,
                                class UGKFogOfWarComponent *SourceComp,
                                class UGKFogOfWarComponent *SightedComp);
   
       // void RegisterActorHit(FHitResult& OutHit, UGKFogOfWarComponent* c);
   
       protected:
       class AGKFogOfWarVolume *FogOfWarVolume;
   };
