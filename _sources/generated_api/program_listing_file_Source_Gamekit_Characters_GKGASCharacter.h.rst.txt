
.. _program_listing_file_Source_Gamekit_Characters_GKGASCharacter.h:

Program Listing for File GKGASCharacter.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Gamekit_Characters_GKGASCharacter.h>` (``Source/Gamekit/Characters/GKGASCharacter.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #pragma once
   
   // Gamekit
   #include "Gamekit/Abilities/GKAttributeSet.h"
   
   // Unreal Engine
   #include "AbilitySystemInterface.h"
   #include "CoreMinimal.h"
   #include "GameFramework/Character.h"
   #include "GameplayTagContainer.h"
   
   // Generated
   #include "GKGASCharacter.generated.h"
   
   DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FCharacterDiedDelegate, AGKGASCharacter *, Character);
   
   UCLASS()
   class GAMEKIT_API AGKGASCharacter: public ACharacter, public IAbilitySystemInterface
   {
       GENERATED_BODY()
   
       public:
       AGKGASCharacter();
   
       UFUNCTION(BlueprintCallable, Category = "Abilities")
       virtual class UAbilitySystemComponent *GetAbilitySystemComponent() const override;
   
       UFUNCTION(BlueprintCallable, Category = "Abilities")
       virtual class UGKAttributeSet *GetAttributeSet() const;
   
       // TODO: Make a struct with a the starting default per class
       // so all this can be removed
       // we can add a CharacterName instead and initialize the unit from that
       UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = "Abilities")
       TArray<TSubclassOf<class UGKGameplayAbility>> DefaultAbilities;
   
       UFUNCTION(BlueprintCallable, Category = "Abilities")
       virtual void InitializeGameplayAbilities();
   
       UFUNCTION(BlueprintCallable, Category = "Abilities")
       virtual void ClearGameplayAbilities();
   
       UFUNCTION(BlueprintCallable, Category = "Abilities")
       void GetActivatableAbilities(TArray<FGameplayAbilitySpecHandle> &Abilities);
   
       protected:
       class UGKAbilitySystemComponent *AbilitySystemComponent;
       class UGKAttributeSet *          AttributeSet;
   
       FGameplayTag TagDead;
       FGameplayTag TagDeathDispel;
   
       public:
       UPROPERTY(BlueprintAssignable, Category = "Death")
       FCharacterDiedDelegate OnCharacterDied;
   
       UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Death")
       UAnimMontage *DeathMontage;
   
       UFUNCTION(BlueprintCallable, Category = "Death")
       void Die();
   };
