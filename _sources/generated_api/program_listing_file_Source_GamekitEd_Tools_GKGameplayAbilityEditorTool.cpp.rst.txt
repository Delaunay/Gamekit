
.. _program_listing_file_Source_GamekitEd_Tools_GKGameplayAbilityEditorTool.cpp:

Program Listing for File GKGameplayAbilityEditorTool.cpp
========================================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_GamekitEd_Tools_GKGameplayAbilityEditorTool.cpp>` (``Source/GamekitEd/Tools/GKGameplayAbilityEditorTool.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // BSD 3-Clause License Copyright (c) 2022, Pierre Delaunay All rights reserved.
   
   // include
   #include "Tools/GKGameplayAbilityEditorTool.h"
   
   
   // GamekitEd
   #include "GamekitEd/GamekitEd.h"
   
   // Gamekit
   #include "Gamekit/Abilities/GKAbilityStatic.h"
   #include "Gamekit/Characters/GKUnitStatic.h"
   
   // Unreal Engine
   #include "IPythonScriptPlugin.h"
   
   
   #define CODE(X) #X
   
   // the ; are necessary because the preprocessor is stripping the newlines
   // but python is fine with inline expression as long as they are split with ;
   FString GenerateAbilityCommand = CODE(
   from importlib import reload;
   import gamekit.abilities as abilities;
   
   reload(abilities);
   abilities.generate_gamekit_abilities()
   );
   
   void UGKGameplayAbilityEditorTool::GenerateGameplayAbilities() 
   {
       IPythonScriptPlugin::Get()->ExecPythonCommand(*GenerateAbilityCommand);
   }
   
   
   void GenerateAbility() {
   
   }
   
   void UGKGameplayAbilityEditorTool::GenerateGameplayAbilitiesFromTable(FName Name, class UDataTable* Table) 
   {
       for(FName RowName: Table->GetRowNames()) {
           FGKAbilityStatic* Row = Table->FindRow<FGKAbilityStatic>(RowName, "", false);
       
       }
   }
   
   void UGKGameplayAbilityEditorTool::GenerateUnitsFromTable(FName Name, class UDataTable* Table) {
       for (FName RowName : Table->GetRowNames()) {
           FGKUnitStatic* Row = Table->FindRow<FGKUnitStatic>(RowName, "", false);
       }
   }
