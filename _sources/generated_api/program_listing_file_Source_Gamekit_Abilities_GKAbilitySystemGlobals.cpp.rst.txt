
.. _program_listing_file_Source_Gamekit_Abilities_GKAbilitySystemGlobals.cpp:

Program Listing for File GKAbilitySystemGlobals.cpp
===================================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Gamekit_Abilities_GKAbilitySystemGlobals.cpp>` (``Source/Gamekit/Abilities/GKAbilitySystemGlobals.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // BSD 3-Clause License Copyright (c) 2022, Pierre Delaunay All rights reserved.
   #include "Gamekit/Abilities/GKAbilitySystemGlobals.h"
   
   // Unreal Engine
   #include "NativeGameplayTags.h"
   
   #define GKTAG(Name, Tag, DevComment)\
       FNativeGameplayTag Name(                                \
           UE_PLUGIN_NAME,                                     \
           UE_MODULE_NAME,                                     \
           Tag,                                                \
           DevComment,                                         \
           ENativeGameplayTagToken::PRIVATE_USE_MACRO_INSTEAD  \
       );
   
   GKTAGS(GKTAG);
   
   #undef GKTAG
   
   
   UGKAbilitySystemGlobals::UGKAbilitySystemGlobals(const FObjectInitializer &ObjectInitializer): Super(ObjectInitializer)
   {
       GameplayCueNotifyPaths.Add("/Gamekit/Abilities/Cues");
   
       // This works
       // GameplayCueNotifyPaths.Add("/Game/Abilities");
   }
   
   void UGKAbilitySystemGlobals::InitGlobalTags()
   {
       UAbilitySystemGlobals::InitGlobalTags();
   
       ActivateFailIsDeadTag       = FailureDead;
       ActivateFailCooldownTag     = FailureCooldown;
       ActivateFailCostTag         = FailureCost;
       ActivateFailTagsBlockedTag  = FailureBlocked;
       ActivateFailTagsMissingTag  = FailureMissing;
       ActivateFailNetworkingTag   = FailureNetwork;
   
   
   }
   
   
   UGKAbilitySystemGlobals& UGKAbilitySystemGlobals::GetGlobals() {
       return (UGKAbilitySystemGlobals&) UGKAbilitySystemGlobals::Get();
   }
