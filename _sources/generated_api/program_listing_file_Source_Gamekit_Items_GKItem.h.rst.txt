
.. _program_listing_file_Source_Gamekit_Items_GKItem.h:

Program Listing for File GKItem.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Gamekit_Items_GKItem.h>` (``Source/Gamekit/Items/GKItem.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // BSD 3-Clause License Copyright (c) 2022, Pierre Delaunay All rights reserved.
   
   #pragma once
   
   // Gamekit
   #include "Gamekit/GKAssetManager.h"
   #include "Gamekit/Gamekit.h"
   
   // Unreal Engine
   #include "Engine/DataAsset.h"
   #include "Styling/SlateBrush.h"
   
   // Generated
   #include "GKItem.generated.h"
   
   class UGKGameplayAbility;
   
   UCLASS(Abstract, BlueprintType)
   class GAMEKIT_API UGKItem: public UPrimaryDataAsset
   {
       GENERATED_BODY()
   
       public:
       UGKItem(): Price(0), MaxCount(1), MaxLevel(1), AbilityLevel(1) {}
   
       UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Item)
       FPrimaryAssetType ItemType;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Item)
       FText ItemName;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Item)
       FText ItemDescription;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Item)
       FSlateBrush ItemIcon;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Item)
       int32 Price;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Max)
       int32 MaxCount;
   
       UFUNCTION(BlueprintCallable, BlueprintPure, Category = Max)
       bool IsConsumable() const;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Max)
       int32 MaxLevel;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Abilities)
       TSubclassOf<UGKGameplayAbility> GrantedAbility;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Abilities)
       int32 AbilityLevel;
   
       UFUNCTION(BlueprintCallable, Category = Item)
       FString GetIdentifierString() const;
   
       virtual FPrimaryAssetId GetPrimaryAssetId() const override;
   };
