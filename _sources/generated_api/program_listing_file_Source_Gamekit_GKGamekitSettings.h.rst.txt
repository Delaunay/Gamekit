
.. _program_listing_file_Source_Gamekit_GKGamekitSettings.h:

Program Listing for File GKGamekitSettings.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Gamekit_GKGamekitSettings.h>` (``Source/Gamekit/GKGamekitSettings.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // BSD 3-Clause License Copyright (c) 2022, Pierre Delaunay All rights reserved.
   
   #pragma once
   
   #include "CoreMinimal.h"
   #include "UObject/NoExportTypes.h"
   
   // Generated
   #include "GKGamekitSettings.generated.h"
   
   
   USTRUCT(BlueprintType)
   struct GAMEKIT_API FGKTeamInfo : public FTableRowBase
   {
       GENERATED_BODY()
   public:
   
       uint8_t      TeamId;
   
       UPROPERTY(EditAnywhere, BlueprintReadWrite)
       FName        Name;
   
       UPROPERTY(EditAnywhere, BlueprintReadWrite)
       FText        DisplayName;
   
       UPROPERTY(EditAnywhere, BlueprintReadWrite)
       FText        Description;
   
       UPROPERTY(EditAnywhere, BlueprintReadWrite)
       FLinearColor Color;
   };
   
   
   template<typename T>
   void ReadDataTable(class UDataTable* Table, TArray<T*>& Rows) {
       Rows.Reserve(Table->GetRowMap().Num());
   
       for (auto RowMapIter(Table->GetRowMap().CreateConstIterator()); RowMapIter; ++RowMapIter)
       {
           T* Info = reinterpret_cast<T*>(RowMapIter.Value());
           Rows.Add(Info);
       }
   }
   
   template<typename T>
   T* GetRow(class UDataTable* Table, FName Row) {
       static FString Context;
       return Table->FindRow<T>(Row, Context, false);
   }
   
   
   USTRUCT(BlueprintType)
   struct GAMEKIT_API FGKExperience : public FTableRowBase
   {
       GENERATED_USTRUCT_BODY()
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly);
       int Level;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly);
       int TotalExperience;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly);
       int AdditionalExperience;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly);
       int MaxAbilityLevel;
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly);
       int MaxUtlimateLevel;
   };
   
   
   USTRUCT(BlueprintType)
   struct GAMEKIT_API FGKNamedObject {
       GENERATED_USTRUCT_BODY()
   
       UPROPERTY(EditAnywhere)
       FName Name;
   
       UPROPERTY(EditAnywhere)
       FSoftObjectPath TablePath;
   };
   
   UCLASS(config = Game)
   class GAMEKIT_API UGKGamekitSettings : public UObject
   {
       GENERATED_UCLASS_BODY()
       
   public:
   
       static UGKGamekitSettings* Get();
   
       UPROPERTY(EditAnywhere, Config, Category = GameplayAbilitySystem)
       FSoftClassPath AbilitySystemGlobalsClassName;
   
   
       // ==================================================
       // Team
       // --------------------------------------------------
   
       UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Teams")
       FName DefaultTeam;
   
       UPROPERTY(EditAnywhere, Config, Category = "Teams")
       FSoftObjectPath TeamDataTable;
   
       class UDataTable* GetTeamTable();
   
   protected:
       class UDataTable* Teams;
   
   private:
       mutable TArray<struct FGKTeamInfo*> TeamCache;
   
   public:
       FGKTeamInfo const* GetTeamInfo(int Index) const;
   
       FGKTeamInfo const* GetTeamInfoFromName(FName Name) const;
   
       void BuildTeamCache() const;
   
       TArray<FGKTeamInfo*> const& GetTeams() {
           BuildTeamCache();
           return TeamCache;
       }
   
   public:
       // ==================================================
       // Experience
       // --------------------------------------------------
       UPROPERTY(EditAnywhere, Config, Category = "Experience")
       FSoftObjectPath ExperienceDataTable;
   
       class UDataTable* GetExperienceLevel();
   
   protected:
   
       class UDataTable* ExperienceLevels;
   
   public:
       // This is used to cache the table locally for fast lookup
       // to avoid the Int -> String -> FName lookup
       // The asc should probably cache this
       // maybe we could move this to the asc global
       // but it does not have a nice Editor widget
       TArray<FGKExperience const*> GetExperienceLevels() {
           TArray<FGKExperience const*> Out;
           ReadDataTable(ExperienceLevels, Out);
           return Out;
       }
   
       UFUNCTION(BlueprintPure)
           FGKExperience const& GetLevelSpec(int Level) {
           static FGKExperience Nothing;
           FGKExperience const* Result = GetRow<FGKExperience>(ExperienceLevels, FName(FString::FromInt(Level)));
   
           if (Result != nullptr)
               return *Result;
   
           return Nothing;
       }
   
   public:
       void InitGlobalData();
   
   private:
   #if WITH_EDITOR
       void OnPreBeginPIE(const bool bIsSimulatingInEditor);
   #endif // WITH_EDITOR
   
       void ResetCachedData();
   
       void HandlePreLoadMap(const FString& MapName);
   
   public:
       DECLARE_MULTICAST_DELEGATE_TwoParams(FOnDataTableChanged, FName /* Name*/, class UDataTable* /* Table*/);
   
       // ==================================================
       // Abilities
       // --------------------------------------------------
   
       UPROPERTY(EditAnywhere, Config, Category = "Abilities")
       bool bAutoRegenerateAbilities;
   
       UPROPERTY(EditAnywhere, Config, Category = "Abilities")
       TArray<FGKNamedObject> AbilityDataTables;
   
       UPROPERTY(EditAnywhere, Config, Category = "Abilities")
       FString AbilityOutput;
   
       FOnDataTableChanged& GetOnAbilityTableChanged() {
           return AbilityTableChanged;
       }
   
   private:
       void LoadAbilityTables();
   
       FOnDataTableChanged AbilityTableChanged;
   
       TMap<FName, class UDataTable*>  AbilityTables;
   
   public:
       // ==================================================
       // Units
       // --------------------------------------------------
   
       UPROPERTY(EditAnywhere, Config, Category = "Units")
       bool bAutoRegenerateUnits;
   
       UPROPERTY(EditAnywhere, Config, Category = "Units")
       TArray<FGKNamedObject> UnitDataTables;
   
       UPROPERTY(EditAnywhere, Config, Category = "Units")
       FString UnitOutput;
   
       FOnDataTableChanged& GetOnUnitTableChanged() {
           return UnitTableChanged;
       }
   private:
       void LoadUnitTables();
   
       FOnDataTableChanged UnitTableChanged;
   
       TMap<FName, class UDataTable*>  UnitTables;
   };
